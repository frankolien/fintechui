// screens/signup_screen.dart
import ‘package:flutter/material.dart’;
import ‘../services/auth_service.dart’;

class SignUpScreen extends StatefulWidget {
const SignUpScreen({Key? key}) : super(key: key);

@override
State<SignUpScreen> createState() => _SignUpScreenState();
}

class _SignUpScreenState extends State<SignUpScreen> {
final _formKey = GlobalKey<FormState>();
final _nameController = TextEditingController();
final _emailController = TextEditingController();
final _phoneController = TextEditingController();
final _passwordController = TextEditingController();
final _confirmPasswordController = TextEditingController();

bool _isLoading = false;
bool _obscurePassword = true;
bool _obscureConfirmPassword = true;

@override
void dispose() {
_nameController.dispose();
_emailController.dispose();
_phoneController.dispose();
_passwordController.dispose();
_confirmPasswordController.dispose();
super.dispose();
}

String? _validateName(String? value) {
if (value == null || value.isEmpty) {
return ‘Name is required’;
}
if (value.length < 2) {
return ‘Name must be at least 2 characters’;
}
return null;
}

String? _validateEmail(String? value) {
if (value == null || value.isEmpty) {
return ‘Email is required’;
}
final emailRegex = RegExp(r’^[\w-.]+@([\w-]+.)+[\w-]{2,4}$’);
if (!emailRegex.hasMatch(value)) {
return ‘Please enter a valid email’;
}
return null;
}

String? _validatePhone(String? value) {
if (value == null || value.isEmpty) {
return ‘Phone number is required’;
}
// Basic phone validation - adjust regex based on your requirements
final phoneRegex = RegExp(r’^+?[1-9]\d{1,14}$’);
if (!phoneRegex.hasMatch(value.replaceAll(RegExp(r’[\s-()]’), ‘’))) {
return ‘Please enter a valid phone number’;
}
return null;
}

String? _validatePassword(String? value) {
if (value == null || value.isEmpty) {
return ‘Password is required’;
}
if (value.length < 8) {
return ‘Password must be at least 8 characters’;
}
if (!value.contains(RegExp(r’[A-Z]’))) {
return ‘Password must contain at least one uppercase letter’;
}
if (!value.contains(RegExp(r’[a-z]’))) {
return ‘Password must contain at least one lowercase letter’;
}
if (!value.contains(RegExp(r’[0-9]’))) {
return ‘Password must contain at least one number’;
}
return null;
}

String? _validateConfirmPassword(String? value) {
if (value == null || value.isEmpty) {
return ‘Please confirm your password’;
}
if (value != _passwordController.text) {
return ‘Passwords do not match’;
}
return null;
}

Future<void> _signUp() async {
if (!_formKey.currentState!.validate()) {
return;
}


setState(() {
  _isLoading = true;
});

try {
  final response = await AuthService.signUpWithEmail(
    email: _emailController.text.trim(),
    password: _passwordController.text,
    name: _nameController.text.trim(),
    phoneNumber: _phoneController.text.trim(),
  );

  if (response.user != null) {
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Account created successfully! Please check your email to verify your account.'),
          backgroundColor: Colors.green,
        ),
      );
      Navigator.pop(context);
    }
  }
} catch (e) {
  if (mounted) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Sign up failed: ${e.toString()}'),
        backgroundColor: Colors.red,
      ),
    );
  }
} finally {
  if (mounted) {
    setState(() {
      _isLoading = false;
    });
  }
}


}

@override
Widget build(BuildContext context) {
return Scaffold(
appBar: AppBar(
title: const Text(‘Sign Up’),
backgroundColor: Colors.blue,
foregroundColor: Colors.white,
),
body: SingleChildScrollView(
padding: const EdgeInsets.all(16.0),
child: Form(
key: _formKey,
child: Column(
crossAxisAlignment: CrossAxisAlignment.stretch,
children: [
const SizedBox(height: 20),
Text(
‘Create Account’,
style: Theme.of(context).textTheme.headlineMedium?.copyWith(
fontWeight: FontWeight.bold,
),
textAlign: TextAlign.center,
),
const SizedBox(height: 30),

```
          // Name Field
          TextFormField(
            controller: _nameController,
            decoration: const InputDecoration(
              labelText: 'Full Name',
              prefixIcon: Icon(Icons.person),
              border: OutlineInputBorder(),
            ),
            validator: _validateName,
            textInputAction: TextInputAction.next,
          ),
          const SizedBox(height: 16),

          // Email Field
          TextFormField(
            controller: _emailController,
            decoration: const InputDecoration(
              labelText: 'Email',
              prefixIcon: Icon(Icons.email),
              border: OutlineInputBorder(),
            ),
            keyboardType: TextInputType.emailAddress,
            validator: _validateEmail,
            textInputAction: TextInputAction.next,
          ),
          const SizedBox(height: 16),

          // Phone Field
          TextFormField(
            controller: _phoneController,
            decoration: const InputDecoration(
              labelText: 'Phone Number',
              prefixIcon: Icon(Icons.phone),
              border: OutlineInputBorder(),
              hintText: '+1234567890',
            ),
            keyboardType: TextInputType.phone,
            validator: _validatePhone,
            textInputAction: TextInputAction.next,
          ),
          const SizedBox(height: 16),

          // Password Field
          TextFormField(
            controller: _passwordController,
            decoration: InputDecoration(
              labelText: 'Password',
              prefixIcon: const Icon(Icons.lock),
              suffixIcon: IconButton(
                icon: Icon(_obscurePassword ? Icons.visibility : Icons.visibility_off),
                onPressed: () {
                  setState(() {
                    _obscurePassword = !_obscurePassword;
                  });
                },
              ),
              border: const OutlineInputBorder(),
            ),
            obscureText: _obscurePassword,
            validator: _validatePassword,
            textInputAction: TextInputAction.next,
          ),
          const SizedBox(height: 16),

          // Confirm Password Field
          TextFormField(
            controller: _confirmPasswordController,
            decoration: InputDecoration(
              labelText: 'Confirm Password',
              prefixIcon: const Icon(Icons.lock_outline),
              suffixIcon: IconButton(
                icon: Icon(_obscureConfirmPassword ? Icons.visibility : Icons.visibility_off),
                onPressed: () {
                  setState(() {
                    _obscureConfirmPassword = !_obscureConfirmPassword;
                  });
                },
              ),
              border: const OutlineInputBorder(),
            ),
            obscureText: _obscureConfirmPassword,
            validator: _validateConfirmPassword,
            textInputAction: TextInputAction.done,
            onFieldSubmitted: (_) => _signUp(),
          ),
          const SizedBox(height: 30),

          // Sign Up Button
          ElevatedButton(
            onPressed: _isLoading ? null : _signUp,
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.blue,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.symmetric(vertical: 16),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
              ),
            ),
            child: _isLoading
                ? const SizedBox(
                    height: 20,
                    width: 20,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                    ),
                  )
                : const Text(
                    'Sign Up',
                    style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                  ),
          ),
          const SizedBox(height: 20),

          // Login Link
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const Text('Already have an account? '),
              GestureDetector(
                onTap: () => Navigator.pop(context),
                child: const Text(
                  'Log In',
                  style: TextStyle(
                    color: Colors.blue,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    ),
  ),
);
```

}
}